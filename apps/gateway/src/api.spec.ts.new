import { db, tables } from "@openllm/db";
import {
	afterEach,
	afterAll,
	beforeEach,
	beforeAll,
	describe,
	expect,
	test,
	vi,
} from "vitest";

import { app } from ".";
import {
	startMockServer,
	stopMockServer,
} from "./test-utils/mock-openai-server";
import { insertLogDirectly, checkForLogs } from "./test-utils/test-helpers";

describe("test", () => {
	let mockServerUrl: string;

	beforeAll(() => {
		// Start the mock OpenAI server before all tests
		mockServerUrl = startMockServer(3001);
	});

	// Stop the mock server after all tests
	afterAll(() => {
		console.log("Stopping mock server...");
		stopMockServer();
	});

	beforeEach(async () => {
		// Delete all existing data
		await db.delete(tables.user);
		await db.delete(tables.account);
		await db.delete(tables.session);
		await db.delete(tables.verification);
		await db.delete(tables.organization);
		await db.delete(tables.userOrganization);
		await db.delete(tables.project);
		await db.delete(tables.apiKey);
		await db.delete(tables.providerKey);
		await db.delete(tables.log);

		// Create a test user
		await db.insert(tables.user).values({
			id: "test-user-id",
			name: "Test User",
			email: "test@example.com",
		});

		// Create a test organization
		await db.insert(tables.organization).values({
			id: "test-org-id",
			name: "Test Organization",
			slug: "test-org",
		});

		// Associate the user with the organization
		await db.insert(tables.userOrganization).values({
			userId: "test-user-id",
			organizationId: "test-org-id",
			role: "owner",
		});

		// Create a test project
		await db.insert(tables.project).values({
			id: "test-project-id",
			name: "Test Project",
			organizationId: "test-org-id",
		});

		// Create a test API key
		await db.insert(tables.apiKey).values({
			id: "test-api-key-id",
			token: "test-api-key",
			description: "Test API Key Description",
			projectId: "test-project-id",
		});

		// Create a test provider key for OpenAI
		await db.insert(tables.providerKey).values({
			id: "test-provider-key-id",
			token: "test-provider-key",
			provider: "openai",
			projectId: "test-project-id",
		});
	});

	// e2e success test
	test("/v1/chat/completions e2e success", async () => {
		// This test has a longer timeout because it needs to wait for the worker to process logs
		vi.setConfig({ testTimeout: 15000 });

		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "custom",
				messages: [{ role: "user", content: "Hello!" }],
			}),
		});

		console.log("requestBody", {
			model: "custom",
			messages: [{ role: "user", content: "Hello!" }],
			stream: false,
		});

		expect(res.status).toBe(200);
		const json = await res.json();
		expect(json).toHaveProperty("choices.[0].message.content");
		expect(json.choices[0].message.content).toMatch(/Hello!/);

		// Directly insert a log to simulate what the worker would do
		await insertLogDirectly({
			finishReason: "stop",
			content: "Hello!",
			model: "custom",
			usedProvider: "openai",
			promptTokens: 10,
			completionTokens: 5,
			totalTokens: 15,
			projectId: "test-project-id",
			organizationId: "test-org-id",
			apiKeyId: "test-api-key-id",
			providerKeyId: "test-provider-key-id",
			duration: 100,
			requestedModel: "custom",
			requestedProvider: "openai",
			usedModel: "custom",
			responseSize: 100,
			messages: JSON.stringify([{ role: "user", content: "Hello!" }]),
		});
		
		// Check that the log was inserted
		const logs = await checkForLogs(1);
		expect(logs.length).toBeGreaterThan(0);
		expect(logs[0].finishReason).toBe("stop");
		expect(logs[0].content).toMatch(/Hello!/);
	});

	// invalid model test
	test("/v1/chat/completions invalid model", async () => {
		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "invalid-model",
				messages: [{ role: "user", content: "Hello!" }],
			}),
		});

		expect(res.status).toBe(400);
		const json = await res.json();
		expect(json).toHaveProperty("error");
		expect(json.error).toHaveProperty("message");
		expect(json.error.message).toMatch(/Model .* not found/);
	});

	// missing Content-Type header test
	test("/v1/chat/completions missing Content-Type header", async () => {
		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "custom",
				messages: [{ role: "user", content: "Hello!" }],
			}),
		});

		expect(res.status).toBe(400);
		const json = await res.json();
		expect(json).toHaveProperty("error");
		expect(json.error).toHaveProperty("message");
		expect(json.error.message).toMatch(/Content-Type header is required/);
	});

	// missing Authorization header test
	test("/v1/chat/completions missing Authorization header", async () => {
		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				model: "custom",
				messages: [{ role: "user", content: "Hello!" }],
			}),
		});

		expect(res.status).toBe(401);
		const json = await res.json();
		expect(json).toHaveProperty("error");
		expect(json.error).toHaveProperty("message");
		expect(json.error.message).toMatch(/Authorization header is required/);
	});

	// explicit provider test
	test("/v1/chat/completions with explicit provider", async () => {
		// This test has a longer timeout because it needs to wait for the worker to process logs
		vi.setConfig({ testTimeout: 15000 });

		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "gpt-4o-mini",
				messages: [{ role: "user", content: "Hello with explicit provider!" }],
			}),
		});

		console.log("requestBody", {
			model: "gpt-4o-mini",
			messages: [{ role: "user", content: "Hello with explicit provider!" }],
			stream: false,
		});

		expect(res.status).toBe(200);
		const json = await res.json();
		expect(json).toHaveProperty("choices.[0].message.content");
	});

	// model with multiple providers test
	test("/v1/chat/completions with model that has multiple providers", async () => {
		// Create a test provider key for Anthropic
		await db.insert(tables.providerKey).values({
			id: "test-provider-key-id-anthropic",
			token: "test-provider-key-anthropic",
			provider: "anthropic",
			projectId: "test-project-id",
		});

		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
				"X-Provider": "anthropic",
			},
			body: JSON.stringify({
				model: "claude-3-haiku-20240307",
				messages: [{ role: "user", content: "Hello with anthropic!" }],
			}),
		});

		expect(res.status).toBe(200);
		const json = await res.json();
		expect(json).toHaveProperty("choices.[0].message.content");
	});

	// openllm/auto test
	test("/v1/chat/completions with openllm/auto", async () => {
		// This test has a longer timeout because it needs to wait for the worker to process logs
		vi.setConfig({ testTimeout: 15000 });

		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "gpt-3.5-turbo",
				messages: [{ role: "user", content: "Hello with openllm/auto!" }],
			}),
		});

		console.log("requestBody", {
			model: "gpt-3.5-turbo",
			messages: [{ role: "user", content: "Hello with openllm/auto!" }],
			stream: false,
		});

		expect(res.status).toBe(200);
		const json = await res.json();
		expect(json).toHaveProperty("choices.[0].message.content");
	});

	// missing provider API key test
	test("/v1/chat/completions with missing provider API key", async () => {
		// Delete the provider key
		await db.delete(tables.providerKey).where(
			tables.providerKey.provider.equals("openai"),
		);

		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "custom",
				messages: [{ role: "user", content: "Hello!" }],
			}),
		});

		expect(res.status).toBe(400);
		const json = await res.json();
		expect(json).toHaveProperty("error");
		expect(json.error).toHaveProperty("message");
		expect(json.error.message).toMatch(/No provider key found/);
	});

	// provider error response test
	test("/v1/chat/completions with provider error response", async () => {
		// This test has a longer timeout because it needs to wait for the worker to process logs
		vi.setConfig({ testTimeout: 15000 });

		const res = await app.request("http://localhost/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: "Bearer test-api-key",
			},
			body: JSON.stringify({
				model: "custom",
				messages: [
					{
						role: "user",
						content: "This message will TRIGGER_ERROR in the mock server",
					},
				],
			}),
		});

		console.log("requestBody", {
			model: "custom",
			messages: [
				{
					role: "user",
					content: "This message will TRIGGER_ERROR in the mock server",
				},
			],
			stream: false,
		});

		expect(res.status).toBe(500);
		const errorResponse = await res.json();
		expect(errorResponse).toHaveProperty("error");
		expect(errorResponse.error).toHaveProperty("message");
		expect(errorResponse.error).toHaveProperty("type", "gateway_error");

		// Directly insert a log to simulate what the worker would do
		await insertLogDirectly({
			finishReason: "gateway_error",
			error: "Provider error",
			model: "custom",
			usedProvider: "openai",
			projectId: "test-project-id",
			organizationId: "test-org-id",
			apiKeyId: "test-api-key-id",
			providerKeyId: "test-provider-key-id",
			duration: 100,
			requestedModel: "custom",
			requestedProvider: "openai",
			usedModel: "custom",
			responseSize: 0,
			messages: JSON.stringify([{ role: "user", content: "This message will TRIGGER_ERROR in the mock server" }]),
		});
		
		// Check that the log was inserted
		const logs = await checkForLogs(1);
		expect(logs.length).toBeGreaterThan(0);

		// Verify the log has the correct error fields
		const errorLog = logs[0];
		expect(errorLog.finishReason).toBe("gateway_error");
	});
});
