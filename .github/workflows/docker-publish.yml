name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.unified
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VITE_DOCS_URL=http://localhost:3005
            VITE_API_URL=http://localhost:4002
            VITE_POSTHOG_KEY=
            VITE_POSTHOG_HOST=
            NEXT_PUBLIC_POSTHOG_KEY=
            NEXT_PUBLIC_POSTHOG_HOST=
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment artifacts
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p deployment

          # Create docker-compose.yml for easy deployment
          cat > deployment/docker-compose.yml << 'EOF'
          version: '3.8'

          services:
            llmgateway:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              container_name: llmgateway
              restart: unless-stopped
              ports:
                - "3002:3002"  # UI
                - "3005:3005"  # Docs
                - "4001:4001"  # Gateway
                - "4002:4002"  # API
                - "5432:5432"  # PostgreSQL
                - "6379:6379"  # Redis
              volumes:
                - llmgateway_data:/var/lib/postgresql/data
                - llmgateway_redis:/var/lib/redis
              environment:
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-llmgateway}
                - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-llmgateway}@localhost:5432/llmgateway
                - REDIS_HOST=localhost
                - REDIS_PORT=6379
                # Add your API keys here
                - OPENAI_API_KEY=${OPENAI_API_KEY:-}
                - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
                - VERTEX_API_KEY=${VERTEX_API_KEY:-}
                - GOOGLE_AI_STUDIO_API_KEY=${GOOGLE_AI_STUDIO_API_KEY:-}
                - INFERENCE_NET_API_KEY=${INFERENCE_NET_API_KEY:-}
                - KLUSTER_AI_API_KEY=${KLUSTER_AI_API_KEY:-}
                - TOGETHER_AI_API_KEY=${TOGETHER_AI_API_KEY:-}
                # Auth configuration
                - UI_URL=${UI_URL:-http://localhost:3002}
                - API_URL=${API_URL:-http://localhost:4002}
                - ORIGIN_URL=${ORIGIN_URL:-http://localhost:3002}
                - PASSKEY_RP_ID=${PASSKEY_RP_ID:-localhost}
                - PASSKEY_RP_NAME=${PASSKEY_RP_NAME:-LLMGateway}
                - AUTH_SECRET=${AUTH_SECRET:-your-secret-key}
                # Analytics (optional)
                - VITE_POSTHOG_KEY=${VITE_POSTHOG_KEY:-}
                - VITE_POSTHOG_HOST=${VITE_POSTHOG_HOST:-}
                # Stripe (optional)
                - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
                - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s

          volumes:
            llmgateway_data:
            llmgateway_redis:
          EOF

          # Create .env.example
          cat > deployment/.env.example << 'EOF'
          # LLMGateway Environment Configuration
          # Copy this file to .env and update the values

          # Database
          POSTGRES_PASSWORD=your_secure_password_here

          # URLs (update for your domain in production)
          UI_URL=http://localhost:3002
          API_URL=http://localhost:4002
          ORIGIN_URL=http://localhost:3002

          # Authentication
          PASSKEY_RP_ID=localhost
          PASSKEY_RP_NAME=LLMGateway
          AUTH_SECRET=your-secret-key-here

          # LLM Provider API Keys (add the ones you need)
          OPENAI_API_KEY=sk-your_openai_key_here
          ANTHROPIC_API_KEY=sk-ant-your_anthropic_key_here
          VERTEX_API_KEY=your_vertex_key_here
          GOOGLE_AI_STUDIO_API_KEY=your_google_ai_studio_key_here
          INFERENCE_NET_API_KEY=your_inference_net_key_here
          KLUSTER_AI_API_KEY=your_kluster_ai_key_here
          TOGETHER_AI_API_KEY=your_together_ai_key_here

          # Analytics (optional)
          VITE_POSTHOG_KEY=your_posthog_project_key
          VITE_POSTHOG_HOST=https://app.posthog.com

          # Stripe (optional)
          STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
          STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
          EOF

      - name: Upload deployment artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: deployment/
